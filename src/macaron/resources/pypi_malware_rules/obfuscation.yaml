# Copyright (c) 2025 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

rules:
- id: default-assigning
  metadata:
    description: Identifies when a default python function is assigned to another variable
  message: Found an instance of assigning a builtin python function to a variable
  languages:
  - python
  severity: ERROR
  pattern-either:
      # assigning, many obfuscation tools listed below do this
  - pattern: $VAR = __import__
  - pattern: $VAR = getattr
  - pattern: $VAR = bytes
  - pattern: $VAR = bytearray
  - pattern: $VAR = exec
  - pattern: $VAR = eval
  - pattern: $VAR = setattr
  - pattern: $VAR = compile
  - pattern: $VAR = map
  - pattern: $VAR = open
  - pattern: $VAR = zip
  - pattern: $VAR = vars
  - pattern: $VAR = dir
      # doing the same using the builtins module
  - pattern: $VAR = builtins.__import__
  - pattern: $VAR = builtins.getattr
  - pattern: $VAR = builtins.bytes
  - pattern: $VAR = builtins.bytearray
  - pattern: $VAR = builtins.exec
  - pattern: $VAR = builtins.eval
  - pattern: $VAR = builtins.setattr
  - pattern: $VAR = builtins.compile
  - pattern: $VAR = builtins.map
  - pattern: $VAR = builtins.open
  - pattern: $VAR = builtins.zip
  - pattern: $VAR = builtins.vars
  - pattern: $VAR = builtins.dir
  - pattern: $VAR = __import__('builtins').__import__
  - pattern: $VAR = __import__('builtins').getattr
  - pattern: $VAR = __import__('builtins').bytes
  - pattern: $VAR = __import__('builtins').bytearray
  - pattern: $VAR = __import__('builtins').exec
  - pattern: $VAR = __import__('builtins').eval
  - pattern: $VAR = __import__('builtins').setattr
  - pattern: $VAR = __import__('builtins').compile
  - pattern: $VAR = __import__('builtins').builtins.map
  - pattern: $VAR = __import__('builtins').open
  - pattern: $VAR = __import__('builtins').zip
  - pattern: $VAR = __import__('builtins').vars
  - pattern: $VAR = __import__('builtins').dir

- id: obfuscation-tools
  metadata:
    description: detects the use of python obfuscation packages on the source code
  message: Found an instance of import and/or using python obfuscation tools
  languages:
  - python
  severity: ERROR
  pattern-either:
      # pyarmor: pyarmor.readthedocs.io/en/latest/index.html
  - pattern: import __pyarmor__
  - pattern: from $MODULE import __pyarmor__
  - pattern: from $MODULE import pyarmor_runtime
  - pattern: __import__('__pyarmor__')
      # pyarmor RTF mode: pyarmor.readthedocs.io/en/latest/tutorial/advanced.html
  - pattern: __assert_armored__($PAYLOAD)
      # inline pyarmor marker: pyarmor.readthedocs.io/en/latest/tutorial/advanced.html
  - pattern-regex: ^\s*#\s*pyarmor:.*
      # obfuscated names using pyob.oxyry.com with O, o, 0 or github.com/QQuick/Opy and pyobfuscate using l, I, 1
  - patterns:
    - pattern-either:
      - pattern: |
          def $OBF(...):
            ...
      - pattern: |
          class $OBF(...):
            ...
      - pattern: $OBF = ...
    - metavariable-regex:
        metavariable: $OBF
        regex: (^_*([lI1_]{5,}|[Oo0_]{5,})_*$)|(^pyarmor_*\d+$)
      # obfuscated using pyobfuscate.com
  - pattern: pyobfuscate=...
      # obfuscated using liftoff.github.io/pyminifier
  - pattern: import mystificate
  - pattern: import demiurgic

- id: inline-imports
  metadata:
    description: detects the use of the private inline import __import__(...)
  message: detected use of inline imports
  languages:
  - python
  severity: ERROR
  pattern: __import__($MODULE)

- id: decode-and-execute
  metadata:
    description: detects the flow of a decoded or constructed string to process execution, code evaluation, network connections, or file writes
  message: detected the flow of a decoded string value to a remote endpoint, process, code evaluation, or file write
  languages:
  - python
  severity: ERROR
  mode: taint
  options:
    # This will help detect partial things over multiple lines like: "x = builtins.bytes; x.decode(...)"
    symbolic_propagation: true
  pattern-sources:
  - pattern-either:
        # marshal encryption
    - pattern: marshal.loads(...)
    - pattern: __import__('marshal').loads(...)
        # bytes decoding
    - pattern: |
        b'...'.decode(...)
    - pattern: $BYTES.decode(...)
    - pattern: bytes.decode(...)
    - pattern: builtins.bytes.decode(...)
    - pattern: __import__('builtins').bytes.decode(...)
    - pattern: $BYTES.join(...).decode()
        # decompression
    - pattern: zlib.decompress(...)
    - pattern: __import__('zlib').decompress(...)
        # base64 decoded string values
    - pattern: base64.b64decode(...)
    - pattern: __import__('base64').b64decode(...)
    - pattern: b64decode(...)
        # hex encoded values
    - pattern: bytes.fromhex(...)
    - pattern: builtins.bytes.fromhex(...)
    - pattern: __import__('builtins').bytes.fromhex(...)
        # unicode construction
    - patterns:
      - pattern-either:
        - pattern: $STRING.join(map($FOO, [...]))
        - pattern: $STRING.join($FOO($VAL) for $VAL in [...])
        - pattern: $STRING.join($FOO($VAL) for $VAL in $ITER)
        - pattern: $STRING.join($FOO($VAL) for $VAL in $GEN(...))
      - metavariable-regex:
          metavariable: $FOO
          regex: unicode|unichr|chr|ord

  pattern-sinks:
  - pattern-either:
        # remote connection
        # using socket module
    - pattern: socket.socket(...)
    - pattern: $SOC.accept(...)
    - pattern: $SOC.bind(...)
    - pattern: $SOC.connect(...)
    - pattern: $SOC.connect_ex(...)
    - pattern: $SOC.listen(...)
    - pattern: $SOC.recv(...)
    - pattern: $SOC.recvfrom(...)
    - pattern: $SOC.recvmsg(...)
    - pattern: $SOC.recvmsg_into(...)
    - pattern: $SOC.recvfrom_into(...)
    - pattern: $SOC.recv_into(...)
    - pattern: $SOC.send(...)
    - pattern: $SOC.sendall(...)
    - pattern: $SOC.sendto(...)
    - pattern: $SOC.sendmsg(...)
    - pattern: $SOC.sendmsg_afalg(...)
    - pattern: $SOC.sendfile(...)
        # using requests module
    - pattern: requests.get(...)
    - pattern: requests.post(...)
    - pattern: requests.put(...)
    - pattern: requests.delete(...)
    - pattern: requests.head(...)
    - pattern: requests.options(...)
    - pattern: requests.patch(...)
    - pattern: requests.Session(...).get(...)
    - pattern: requests.Session(...).delete(...)
    - pattern: requests.Session(...).head(...)
    - pattern: requests.Session(...).options(...)
    - pattern: requests.Session(...).patch(...)
    - pattern: requests.Session(...).post(...)
    - pattern: requests.Session(...).put(...)
    - pattern: requests.Session(...).request(...)
    - pattern: requests.Session(...).send(...)
    - pattern: requests.Request(...)
        # using urllib3 module
    - pattern: urllib3.request(...)
    # object creation here is included as decoded values may be passed as parameters
    - pattern: urllib3.PoolManager(...)
    - pattern: urllib3.PoolManager(...).request(...)
    - pattern: urllib3.PoolManager(...).request_encode_body(...)
    - pattern: urllib3.PoolManager(...).request_encode_url(...)
    - pattern: urllib3.PoolManager(...).urlopen(...)
    - pattern: urllib3.HTTPConnectionPool(...)
    - pattern: urllib3.HTTPConnectionPool(...).urlopen(...)
    - pattern: urllib3.HTTPConnectionPool(...).request(...)
    - pattern: urllib3.HTTPConnectionPool(...).request_encode_body(...)
    - pattern: urllib3.HTTPConnectionPool(...).request_encode_url(...)
    - pattern: urllib3.HTTPSConnectionPool(...)
    - pattern: urllib3.HTTPSConnectionPool(...).urlopen(...)
    - pattern: urllib3.HTTPSConnectionPool(...).request(...)
    - pattern: urllib3.HTTPSConnectionPool(...).request_encode_body(...)
    - pattern: urllib3.HTTPSConnectionPool(...).request_encode_url(...)
    - pattern: urllib3.HTTPConnection(...)
    - pattern: urllib3.HTTPConnection(...).request(...)
    - pattern: urllib3.HTTPConnection(...).request_chunked(...)
    - pattern: urllib3.HTTPSConnection(...)
    - pattern: urllib3.HTTPSConnection(...).request(...)
    - pattern: urllib3.HTTPSConnection(...).request_chunked(...)
    - pattern: urllib3.ProxyManager(...).urlopen(...)
        # using urllib
    - pattern: urllib.request(...)
    - pattern: urllib.request.urlopen(...)
        # using httpx
    - pattern: httpx.request(...)
    - pattern: httpx.get(...)
    - pattern: httpx.post(...)
    - pattern: httpx.put(...)
    - pattern: httpx.delete(...)
    - pattern: httpx.head(...)
    - pattern: httpx.options(...)
    - pattern: httpx.stream(...)
    - pattern: httpx.patch(...)
    - pattern: httpx.AsyncClient(...)
    - pattern: httpx.AsyncClient(...).request(...)
    - pattern: httpx.AsyncClient(...).get(...)
    - pattern: httpx.AsyncClient(...).post(...)
    - pattern: httpx.AsyncClient(...).put(...)
    - pattern: httpx.AsyncClient(...).delete(...)
    - pattern: httpx.AsyncClient(...).head(...)
    - pattern: httpx.AsyncClient(...).options(...)
    - pattern: httpx.AsyncClient(...).stream(...)
    - pattern: httpx.AsyncClient(...).patch(...)
    - pattern: httpx.AsyncClient(...).send(...)
    - pattern: httpx.Client(...)
    - pattern: httpx.Client(...).request(...)
    - pattern: httpx.Client(...).get(...)
    - pattern: httpx.Client(...).post(...)
    - pattern: httpx.Client(...).put(...)
    - pattern: httpx.Client(...).delete(...)
    - pattern: httpx.Client(...).head(...)
    - pattern: httpx.Client(...).options(...)
    - pattern: httpx.Client(...).stream(...)
    - pattern: httpx.Client(...).patch(...)
    - pattern: httpx.Client(...).send(...)

        # process spawning
        # using subprocess module
    - pattern: subprocess.check_output(...)
    - pattern: subprocess.check_call(...)
    - pattern: subprocess.run(...)
    - pattern: subprocess.call(...)
    - pattern: subprocess.Popen(...)
    - pattern: subprocess.getoutput(...)
    - pattern: subprocess.getstatusoutput(...)
        # using os module
    - pattern: os.execl(...)
    - pattern: os.execle(...)
    - pattern: os.execlp(...)
    - pattern: os.execlpe(...)
    - pattern: os.execv(...)
    - pattern: os.execve(...)
    - pattern: os.execvp(...)
    - pattern: os.execvpe(...)
    - pattern: os.popen(...)
    - pattern: os.posix_spawn(...)
    - pattern: os.posix_spawnp(...)
    - pattern: os.spawnl(...)
    - pattern: os.spawnle(...)
    - pattern: os.spawnlp(...)
    - pattern: os.spawnlpe(...)
    - pattern: os.spawnv(...)
    - pattern: os.spawnve(...)
    - pattern: os.spawnvp(...)
    - pattern: os.spawnvpe(...)
    - pattern: os.system(...)
        # using commands module
    - pattern: commands.getstatusoutput(...)
    - pattern: commands.getoutput(...)
        # using runpy module
    - pattern: runpy.run_module(...)
    - pattern: runpy.run_path(...)

        # code evaluation/execution
    - pattern: exec(...)
    - pattern: eval(...)
    - pattern: ast.literal_eval(...)
    - pattern: builtins.exec(...)
    - pattern: builtins.eval(...)
    - pattern: __import__('builtins').exec(...)
    - pattern: __import__('builtins').eval(...)

        # file write
    - pattern: $FILE.write(...)
    - pattern: $MODULE.dumps(...)
    - pattern: os.write(...)
    - pattern: os.writev(...)
    - pattern: os.pwrite(...)
    - pattern: os.pwritev(...)
