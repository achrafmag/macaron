# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for the TyposquattingPresenceAnalyzer heuristic."""


import os
from pathlib import Path
from unittest.mock import MagicMock

import pytest

from macaron.errors import HeuristicAnalyzerValueError
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.metadata.typosquatting_presence import TyposquattingPresenceAnalyzer


@pytest.fixture(name="analyzer")
def analyzer_(tmp_path: Path) -> TyposquattingPresenceAnalyzer:
    """Pytest fixture to create a TyposquattingPresenceAnalyzer instance with a dummy popular packages file."""
    # Create a dummy popular packages file.
    pkg_file = Path(os.path.join(tmp_path, "popular.txt"))
    popular_packages = ["requests", "flask", "pytest"]
    pkg_file.write_text("\n".join(popular_packages), encoding="utf-8")
    analyzer_instance = TyposquattingPresenceAnalyzer(str(pkg_file))
    return analyzer_instance


def test_analyze_exact_match_pass(analyzer: TyposquattingPresenceAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer passes when the package name is an exact match to a popular package."""
    pypi_package_json.component_name = "requests"
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.PASS
    assert info == {"package_name": "requests"}


def test_analyze_similar_name_fail(analyzer: TyposquattingPresenceAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer fails when the package name is suspiciously similar to a popular package."""
    pypi_package_json.component_name = "reqursts"
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.FAIL
    assert info["package_name"] == "reqursts"
    assert info["popular_package"] == "requests"
    # The ratio should match or exceed threshold.
    assert isinstance(info["similarity_ratio"], float)
    assert info["similarity_ratio"] >= analyzer.distance_ratio_threshold


def test_analyze_unrelated_name_pass(analyzer: TyposquattingPresenceAnalyzer, pypi_package_json: MagicMock) -> None:
    """Test the analyzer passes when the package name is not similar to any popular package."""
    pypi_package_json.component_name = "launchable"
    result, info = analyzer.analyze(pypi_package_json)
    assert result == HeuristicResult.PASS
    assert info == {"package_name": "launchable"}


def test_analyze_nonexistent_file_skip() -> None:
    """Test the analyzer raises an error if the popular packages file does not exist."""
    with pytest.raises(HeuristicAnalyzerValueError) as exc_info:
        TyposquattingPresenceAnalyzer("nonexistent_file.txt")
    assert "Popular packages file not found or path not configured" in str(exc_info.value)


@pytest.mark.parametrize(
    ("package1", "package2", "expected_ratio"),
    [
        ("requests", "requests", 1.0),
        ("reqursts", "requests", 11 / 12),
        ("abcd", "wxyz", 0.0),
    ],
)
def test_jaro_distance(
    analyzer: TyposquattingPresenceAnalyzer, package1: str, package2: str, expected_ratio: float
) -> None:
    """Test the Jaro distance calculation."""
    assert analyzer.jaro_distance(package1, package2) == expected_ratio


def test_empty_popular_packages_file(tmp_path: Path, pypi_package_json: MagicMock) -> None:
    """Test the analyzer skips when the popular packages file is empty."""
    pkg_file = Path(os.path.join(tmp_path, "empty_popular.txt"))
    pkg_file.write_text("", encoding="utf-8")
    analyzer_instance = TyposquattingPresenceAnalyzer(str(pkg_file))
    result, info = analyzer_instance.analyze(pypi_package_json)
    assert result == HeuristicResult.SKIP
    error_msg = info.get("warning")
    assert isinstance(error_msg, str)
    assert "Popular packages file is empty" in error_msg
