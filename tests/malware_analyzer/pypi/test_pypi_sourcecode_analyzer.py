# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for experimental feature detecting malicious patterns in PyPI package sourcecode."""
import json
import os
from unittest.mock import MagicMock, patch

import pytest

import macaron
from macaron.errors import ConfigurationError, HeuristicAnalyzerValueError
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.sourcecode.pypi_sourcecode_analyzer import PyPISourcecodeAnalyzer


def test_no_resources() -> None:
    """Test for when the semgrep rules can't be found, so error."""
    with pytest.raises(ConfigurationError):
        _ = PyPISourcecodeAnalyzer(resources_path="")


@patch("macaron.malware_analyzer.pypi_heuristics.sourcecode.pypi_sourcecode_analyzer.defaults")
def test_no_defaults_section(mock_defaults: MagicMock) -> None:
    """Test for when the heuristics.pypi in defaults isn't defined at all, so error."""
    mock_defaults.has_section.side_effect = lambda _: False
    with pytest.raises(ConfigurationError):
        _ = PyPISourcecodeAnalyzer(resources_path=os.path.join(os.path.dirname(macaron.__file__), "resources"))


@patch("macaron.malware_analyzer.pypi_heuristics.sourcecode.pypi_sourcecode_analyzer.defaults")
def test_no_custom_path(mock_defaults: MagicMock) -> None:
    """Test for when a default path isn't provided, so the custom rule path should be None."""
    mock_defaults.has_section.side_effect = lambda section: section == "heuristic.pypi"
    mock_defaults.__getitem__.side_effect = lambda _: (MagicMock(get=MagicMock(return_value=None)))
    analyzer = PyPISourcecodeAnalyzer(resources_path=os.path.join(os.path.dirname(macaron.__file__), "resources"))
    assert analyzer.custom_rule_path is None

    mock_defaults.has_section.side_effect = lambda section: section == "heuristic.pypi"
    mock_defaults.__getitem__.side_effect = lambda section: (
        MagicMock(get=MagicMock(return_value="" if section == "heuristic.pypi" else None))
    )
    analyzer = PyPISourcecodeAnalyzer(resources_path=os.path.join(os.path.dirname(macaron.__file__), "resources"))
    assert analyzer.custom_rule_path is None


@patch("macaron.malware_analyzer.pypi_heuristics.sourcecode.pypi_sourcecode_analyzer.defaults")
def test_nonexistent_rule_path(mock_defaults: MagicMock) -> None:
    """Test for when the custom path provided does not exist, so error."""
    mock_defaults.has_section.side_effect = lambda section: section == "heuristic.pypi"
    mock_defaults.__getitem__.side_effect = lambda section: (
        MagicMock(get=MagicMock(return_value="some_random_path" if section == "heuristic.pypi" else None))
    )
    with pytest.raises(ConfigurationError):
        _ = PyPISourcecodeAnalyzer(resources_path=os.path.join(os.path.dirname(macaron.__file__), "resources"))


@patch("macaron.malware_analyzer.pypi_heuristics.sourcecode.pypi_sourcecode_analyzer.defaults")
def test_invalid_custom_rules(mock_defaults: MagicMock) -> None:
    """Test for when the provided file is not a valid semgrep rule, so error,"""
    # use this file as an invalid semgrep rule as it is most definitely not a semgrep rule, and does exist
    mock_defaults.has_section.side_effect = lambda section: section == "heuristic.pypi"
    mock_defaults.__getitem__.side_effect = lambda section: (
        MagicMock(get=MagicMock(return_value=os.path.abspath(__file__) if section == "heuristic.pypi" else None))
    )
    with pytest.raises(ConfigurationError):
        _ = PyPISourcecodeAnalyzer(resources_path=os.path.join(os.path.dirname(macaron.__file__), "resources"))


def test_no_sourcecode(pypi_package_json: MagicMock) -> None:
    """Test for when there is no source code available, so error."""
    analyzer = PyPISourcecodeAnalyzer(resources_path=os.path.join(os.path.dirname(macaron.__file__), "resources"))

    pypi_package_json.package_sourcecode_path = ""

    with pytest.raises(HeuristicAnalyzerValueError):
        analyzer.analyze(pypi_package_json)


@patch("macaron.malware_analyzer.pypi_heuristics.sourcecode.pypi_sourcecode_analyzer.defaults")
@pytest.mark.parametrize(
    # the sourcecode sample directory under resources/sourcecode_samples and the semgrep rule under resources/pypi_malware_rules
    ("sourcecode_sample_dir", "rule_file"),
    [
        pytest.param("obfuscation", "obfuscation.yaml", id="obfuscation"),
        pytest.param("exfiltration", "exfiltration.yaml", id="exfiltration"),
    ],
)
def test_rules(
    mock_defaults: MagicMock, pypi_package_json: MagicMock, sourcecode_sample_dir: str, rule_file: str
) -> None:
    """Test the semgrep rules for obfuscation on code samples."""
    sample_path = os.path.join(
        os.path.dirname(os.path.abspath(__file__)), "resources", "sourcecode_samples", sourcecode_sample_dir
    )

    with open(os.path.join(sample_path, "expected_results.json"), encoding="utf-8") as file:
        expected_results = json.loads(file.read())

    # test defaults without custom rule path
    mock_defaults.has_section.side_effect = lambda section: section == "heuristic.pypi"
    mock_defaults.__getitem__.side_effect = lambda section: (
        MagicMock(get=MagicMock(return_value="" if section == "heuristic.pypi" else None))
    )

    analyzer = PyPISourcecodeAnalyzer(resources_path=os.path.join(os.path.dirname(macaron.__file__), "resources"))

    pypi_package_json.package_sourcecode_path = sample_path
    analyzer.default_rule_path = os.path.join(analyzer.default_rule_path, rule_file)

    result, analysis = analyzer.analyze(pypi_package_json)

    assert result == HeuristicResult.FAIL
    assert expected_results == analysis
