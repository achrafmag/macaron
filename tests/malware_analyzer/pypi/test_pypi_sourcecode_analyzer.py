# Copyright (c) 2024 - 2025, Oracle and/or its affiliates. All rights reserved.
# Licensed under the Universal Permissive License v 1.0 as shown at https://oss.oracle.com/licenses/upl/.

"""Tests for experimental feature detecting malicious patterns in PyPI package sourcecode."""
import json
import os
from unittest.mock import MagicMock

import pytest

import macaron
from macaron.errors import ConfigurationError, HeuristicAnalyzerValueError
from macaron.malware_analyzer.pypi_heuristics.heuristics import HeuristicResult
from macaron.malware_analyzer.pypi_heuristics.sourcecode.pypi_sourcecode_analyzer import PyPISourcecodeAnalyzer


@pytest.mark.skip(reason="experimental feature")
def test_no_resources() -> None:
    """Test for when the semgrep rules can't be found, so error."""
    with pytest.raises(ConfigurationError):
        _ = PyPISourcecodeAnalyzer(resources_path="")


@pytest.mark.skip(reason="experimental feature")
def test_no_sourcecode(pypi_package_json: MagicMock) -> None:
    """Test for when there is no source code available, so error."""
    analyzer = PyPISourcecodeAnalyzer(resources_path=os.path.join(os.path.dirname(macaron.__file__), "resources"))

    pypi_package_json.package_sourcecode_path = ""

    with pytest.raises(HeuristicAnalyzerValueError):
        analyzer.analyze(pypi_package_json)


@pytest.mark.skip(reason="experimental feature")
@pytest.mark.parametrize(
    # the sourcecode sample directory under resources/sourcecode_samples and the semgrep rule under resources/pypi_malware_rules
    ("sourcecode_sample_dir", "rule_file"),
    [
        pytest.param("obfuscation", "obfuscation.yaml", id="obfuscation"),
        pytest.param("exfiltration", "exfiltration.yaml", id="exfiltration"),
    ],
)
def test_rules(pypi_package_json: MagicMock, sourcecode_sample_dir: str, rule_file: str) -> None:
    """Test the semgrep rules for obfuscation on code samples."""
    sample_path = os.path.join(
        os.path.dirname(os.path.abspath(__file__)), "resources", "sourcecode_samples", sourcecode_sample_dir
    )

    with open(os.path.join(sample_path, "expected_results.json"), encoding="utf-8") as file:
        expected_results = json.loads(file.read())

    analyzer = PyPISourcecodeAnalyzer(resources_path=os.path.join(os.path.dirname(macaron.__file__), "resources"))

    pypi_package_json.package_sourcecode_path = sample_path
    analyzer.default_rule_path = os.path.join(analyzer.default_rule_path, rule_file)

    result, analysis = analyzer.analyze(pypi_package_json)

    assert result == HeuristicResult.FAIL
    assert expected_results == analysis
